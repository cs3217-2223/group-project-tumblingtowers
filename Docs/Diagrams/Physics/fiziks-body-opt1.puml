@startuml
interface FiziksBody {
  + position: CGPoint
  + zRotation: CGFloat
  + velocity: CGVector
  + angularVelocity: CGFloat
  + friction: CGFloat
  + mass: CGFloat
  + density: CGFloat
  + restitution: CGFloat
  + linearDamping: CGFloat
  + angularDamping: CGFloat
  + affectedByGravity: Bool
  + isDynamic: Bool
  + applyForce(_ force: CGVector): Void
  + applyTorque(_ torque: CGFloat): Void
  + applyForce(_ force: CGVector, at point: CGPoint): Void
  + applyImpulse(_ impulse: CGVector): Void
  + applyAngularImpulse(_ angularImpulse: CGFloat): Void
  + applyImpulse(_ impulse: CGVector, at point: CGPoint): Void
}

class GameWorldObject {
  + position: CGPoint
  + zRotation: CGFloat
  + velocity: CGVector
  + angularVelocity: CGFloat
  + friction: CGFloat
  + mass: CGFloat
  + density: CGFloat
  + restitution: CGFloat
  + linearDamping: CGFloat
  + angularDamping: CGFloat
  + affectedByGravity: Bool
  + isDynamic: Bool
  + applyForce(_ force: CGVector): Void
  + applyTorque(_ torque: CGFloat): Void
  + applyForce(_ force: CGVector, at point: CGPoint): Void
  + applyImpulse(_ impulse: CGVector): Void
  + applyAngularImpulse(_ angularImpulse: CGFloat): Void
  + applyImpulse(_ impulse: CGVector, at point: CGPoint): Void
}

interface FiziksEngine {
  + bodies: [FiziksBody] { get set }
}

FiziksBody <|.. GameWorldObject
FiziksEngine --> FiziksBody
@enduml