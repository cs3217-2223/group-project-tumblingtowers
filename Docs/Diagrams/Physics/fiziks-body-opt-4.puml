@startuml
class GameWorld {
    - fiziksLookup: Dictionary<GameWorldObject, FiziksBody>
    + addObject(object: GameWorldObject, body: FiziksBody): void
    + removeObject(object: GameWorldObject): void
    + update(deltaTime: TimeInterval): void
}

interface FiziksBody {
    - position: CGPoint
    - zRotation: CGFloat
    - velocity: CGVector
    - angularVelocity: CGFloat
    - friction: CGFloat
    - mass: CGFloat
    - density: CGFloat
    - restitution: CGFloat
    - linearDamping: CGFloat
    - angularDamping: CGFloat
    - affectedByGravity: Bool
    - isDynamic: Bool
    + applyForce(_ force: CGVector): void
    + applyTorque(_ torque: CGFloat): void
    + applyForce(_ force: CGVector, at point: CGPoint): void
    + applyImpulse(_ impulse: CGVector): void
    + applyAngularImpulse(_ angularImpulse: CGFloat): void
    + applyImpulse(_ impulse: CGVector, at point: CGPoint): void
}

class FiziksEngine {
    + addBody(body: FiziksBody): void
    + removeBody(body: FiziksBody): void
    + update(deltaTime: TimeInterval): void
}

class GameWorldObject {
    - fiziksBody: FiziksBody
}

GameWorld --> GameWorldObject
FiziksEngine -> FiziksBody
FiziksBody --> GameWorldObject
@enduml